// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array freeList;
    static Array ram;

    /** Initializes the class. */
    function void init() 
    {
        var Array heap;
        let heap = 2098;
        let ram = 0;
        let heap[0] = 0;
        let heap[1] = 14334;
        let freeList = heap;


    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) 
    {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) 
    {
        let ram[address] = value;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) 
    {
        var Array segment;
        var int oldHeapSize;

        if(freeList[1] > size)
        {
            let segment = freeList;
            let segment[1] = size;
            let segment[2] = 1;
            let oldHeapSize = freeList[1];
            let freeList = freeList + size + 3;
            let freeList[1] =  oldHeapSize - (size + 3);
            let segment[0] = freeList;
            let freeList[0] = 0;
            let freeList[2] = 0;
            return segment + 3;   
        }

        else
        {
            let segment = 2098;

            while((segment[2] = 1 | segment[1] < size) & segment != 0)
            {
                let segment = segment[0];
            }

            if(segment = 0)
            {
                return;
            }

            else
            {
                segment[2] = 1;
                return segment + 3;
            }

        }

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) 
    {
        var Array segment;

        let segment = o - 2;
        let segment[2] = 0;

    }    
}
