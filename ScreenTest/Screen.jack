// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen;
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() 
    {
        let screen = 16384;
        let color = 1;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() 
    {
        var int i;
        let i = 0;

        while (i < 8192)
        {
            let screen[i] = 0;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) 
    {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) 
    {
        var int offset, bit;

        let offset = (x / 16) + (y * 32);
        let bit = x - ((x / 16) * 16);

        if(color)
        {
            let screen[offset] = screen[offset] | twoToThe[bit];
        }

        else
        {
            let screen[offset] = screen[offset] & ~(twoToThe[bit]);
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) 
    {
        var int dx, dy, a, b;
        var int adyMinusbdx;
        var int bdxMinusady;

        let a = b = 0;

        let dx = x2 - x1;
        let dy = y2 - y1;



        if(dx = 0)
        {
            if(dy > 0)
            {
                while(b < (dy + 1))
                {
                    do Screen.drawPixel(x1, y1 + b);
                    let b = b + 1;
                }
            }

            else
            {
                let b = y1;

                while(b > (y2 - 1))
                {
                    do Screen.drawPixel(x1, b);
                    let b = b - 1;
                }                    
            }

            return;
        }

        if(dy = 0)
        {
            if(dx > 0) 
            {
                while(a < (dx + 1))
                {
                    do Screen.drawPixel(x1 + a, y1);
                    let a = a + 1;
                }

            }

            else
            {
                let a = x1;

                while(a > (x2 - 1))
                {                    
                    do Screen.drawPixel(a, y1);
                    let a = a - 1;
                }                    
            }
        

            return;
        }



        if(dx > 0 & dy > 0)
        {
            let bdxMinusady = 0;

            while(a < (dx + 1) & b < (dy + 1))
            {
                do Screen.drawPixel(x1 + a, y1 + b);

                if(adyMinusbdx < 0)
                {
                    let a = a+1;
                    let adyMinusbdx = adyMinusbdx+dy;
                }

                else
                {
                    let b = b+1;
                    let adyMinusbdx = adyMinusbdx-dx;
                }
            }

            return;
        }

        if(dx < 0 & dy < 0)
        {
            let bdxMinusady = 0;
            let dx = -dx;
            let dy = -dy;

            while((-a) < (dx + 1) | (-b) < (dy + 1))
            {
                do Screen.drawPixel(x1 + a, y1 + b);
                if(adyMinusbdx < 0)
                {
                    let a = a-1;
                    let adyMinusbdx = adyMinusbdx+dy;
                }

                else
                {
                    let b = b-1;
                    let adyMinusbdx = adyMinusbdx-dx;
                }
            }

            return;
        }

        if(dx > 0 & dy < 0)
        {
            let bdxMinusady=0;
            let dy = -dy;

            while(a < (dx + 1) | (-b) < (dy + 1))
            {
                do Screen.drawPixel(x1 + a, y1 + b);
                if(adyMinusbdx < 0)
                {
                    let a = a+1;
                    let adyMinusbdx = adyMinusbdx+dy;
                }

                else
                {
                    let b = b-1;
                    let adyMinusbdx = adyMinusbdx-dx;
                }
            }

            return;
        }

        if(dx < 0 & dy > 0)
        {
            let bdxMinusady=0;
            let dx = -dx;

            while((-a) < (dx + 1) | b < (dy + 1))
            {
                do Screen.drawPixel(x1 + a, y1 + b);
                if(adyMinusbdx < 0)
                {
                    let a = a-1;
                    let adyMinusbdx = adyMinusbdx+dy;
                }

                else
                {
                    let b = b+1;
                    let adyMinusbdx = adyMinusbdx-dx;
                }
            }

            return;
        }

        return;

    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) 
    {

        while(~(y1 = y2))
        {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }

        return; 

        //do Screen.drawLine(x1, y1, (x1 + (x2 - x1)), y1); //____
        //do Screen.drawLine(x1, y1, x1, (y1 + (y2 - y1))); //|
        //do Screen.drawLine(x1, (y1 + (y2 - y1)), (x1 + (x2 - x1)), (y1 + (y2 - y1))); //_____
        //do Screen.drawLine((x1 + (x2 - x1)), y1, (x1 + (x2 - x1)), (y1 + (y2 - y1))); //     |

    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) 
    {
        var int rSqr, dy;

        let rSqr = r * r;
        let dy = -r;

        while(dy < r)
        {
            do Screen.drawLine((x - (Math.sqrt(rSqr - (dy * dy)))), (y + dy), (x + (Math.sqrt(rSqr - (dy * dy)))), (y + dy));
            let dy = dy + 1;
        }

        return;
    }
}
